#include <iostream>
#include <fstream>
#include <string>
#include <map>
#include <set>
#include <algorithm>
#include <list>
#include <sstream>
#include <vector>
#include <functional>

using namespace std;


void print1(std::map < std::string, std::set <int> > map)
{
	for (auto& i : map)
	{
		std::cout << i.first << " - ";
		for (auto it = i.second.begin(); it != i.second.end(); ++it)
			std::cout << *it << " ";
		std::cout << std::endl;
	}
}
void task1(std::ifstream& file, std::function<bool(std::string, std::string)> lambda)
{
	std::string line;
	int count = 1;
	std::string word;
	std::map < std::string, std::set <int> > map;
	while (std::getline(file, line))
	{
		std::istringstream is(line);
		std::string word;
		while (is >> word)
		{
			if (lambda("wh", word))
				map[word].insert(count);
		}
		++count;
	}
	print1(map);
}

void print2(std::vector < std::pair < std::string, int>> map)
{
	std::cout << map[0].first << " - " << map[0].second << '\n';
}
void task2(std::ifstream& file, std::function<bool(char, std::string)> lambda)
{
	std::map<std::string, int> map;
	char letter = 'q';
	std::string word;
	while (file >> word)
	{
		if (lambda(letter, word))
			++map[word];
	}
	std::vector < std::pair < std::string, int>> m(map.begin(), map.end());
	std::sort(m.begin(), m.end(), [](auto a, auto b) {return a.second > b.second; });
	print2(m);
}

void HashTable_3::remove(std::string key)
{
	size_t index = hash(key);
	std::list<ELEM>& list = data[index];
	auto it = std::find_if(list.begin(), list.end(), [key](const ELEM& elem) { return elem.key == key; });
	if (it != list.end()) {
		list.erase(it);
		std::cout << "Element with key " << key << " removed." << std::endl;
	}
	else {
		std::cout << "Element with key " << key << " not found." << std::endl;
	}
}

void backtrack1(vector < vector <int>>& cost, int i, int j, int sum, vector<int>& sums) {
	if (i == 9 && j == 9)
	{
		// если мы достигли правой нижней ячейки, то сохраняем сумму платы за посещение ячеек на этом пути
		sums.push_back(sum + cost[i][j]);
		return;
	}

	if (i < 9)  // движение вниз
		backtrack1(cost, i + 1, j, sum + cost[i][j], sums);


	if (j < 9) // движение вправо
		backtrack1(cost, i, j + 1, sum + cost[i][j], sums);
}
void backtrack2(vector < vector < int>>& coins, int i, int j, int sum, int& max_sum, int& count)
{
	if (i == 9 && j == 9) { // если мы достигли правой нижней ячейки, то сохраняем сумму денежных сумм на этом пути
		if (sum > max_sum) {
			max_sum = sum;
			count = 1; // если мы нашли большую сумму, то количество маршрутов, дающих эту сумму, будет равно 1
		}
		else if (sum == max_sum) {
			count++; // если мы нашли еще один маршрут, дающий максимальную сумму, то увеличиваем количество маршрутов
		}
		return;
	}

	if (i < 9) { // движение вниз
		backtrack2(coins, i + 1, j, sum + coins[i][j], max_sum, count);
	}

	if (j < 9) { // движение вправо
		backtrack2(coins, i, j + 1, sum + coins[i][j], max_sum, count);
	}
}

int main()
{
	//1
	std::ifstream file("file.txt");
	auto lambda = [](char letter, std::string word)
	{
		bool flag = false;
		if (word[word.length()] == letter)
			flag = true;
		return flag;
	};
	task1(file, lambda);

	std::ifstream file("Text_1.txt");
	auto lambda = [](std::string letter, std::string let)
	{
		bool flag = false;
		for (size_t i = 0; i < letter.size(); i++)
		{
			if (let[i] == letter[i] && let[i + 1] == letter[i + 1])
				flag = true;
		}
		return flag;
	};
	task1(file, lambda);

	//2
	std::ifstream file("Data_1.txt");
	HashTable_3 ht;
	ht.print();
	ht.remove("6290922735");

	//3
	vector < vector <int>> coins = {
		{2, 9, 1, 3, 5, 0, 4, 8, 7, 7},
		{6, 0, 7, 8, 3, 6, 9, 0, 9, 6},
		{1, 1, 5, 0, 5, 6, 1, 2, 8, 8},
		{9, 9, 1, 4, 3, 4, 1, 4, 3, 8},
		{2, 0, 4, 1, 7, 7, 6, 4, 2, 3},
		{9, 0, 9, 2, 0, 6, 3, 8, 6, 0},
		{1, 3, 1, 4, 4, 5, 9, 2, 7, 7},
		{9, 9, 2, 2, 1, 5, 9, 3, 0, 9},
		{7, 4, 4, 7, 7, 3, 3, 9, 2, 6},
		{9, 5, 5, 8, 2, 1, 3, 0, 4, 0}
	};
	int max_sum = 0;
	int count = 0;
	backtrack(coins, 0, 0, coins[0][0], max_sum, count);
	cout << "Максимальная денежная сумма: " << max_sum << endl;
	cout << "Количество маршрутов, дающих максимальную сумму: " << count << endl;

	vector < vector < int>> cost = {
		{10, 21, 30, 40, 50, 60, 70, 80, 90, 99},
		{20, 30, 40, 50, 60, 70, 80, 90, 99, 10},
		{30, 40, 50, 60, 70, 80, 90, 99, 10, 20},
		{40, 50, 60, 70, 80, 90, 99, 10, 20, 30},
		{50, 60, 70, 80, 90, 99, 10, 20, 30, 40},
		{60, 70, 80, 90, 99, 10, 20, 30, 40, 50},
		{70, 80, 90, 99, 10, 20, 30, 40, 50, 60},
		{80, 90, 99, 10, 20, 30, 40, 50, 60, 70},
		{90, 99, 10, 20, 30, 40, 50, 60, 70, 80},
		{99, 10, 20, 30, 40, 50, 60, 70, 80, 90}
	};
	vector<int> sums;
	backtrack(cost, 0, 0, 0, sums);
	sort(sums.begin(), sums.end());
	cout << *(sums.end() - 1) << *sums.begin();


	return 0;
}
